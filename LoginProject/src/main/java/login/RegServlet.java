package login;

import jakarta.servlet.ServletConfig;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;


/**
 * Servlet implementation class RegServlet
 */
//@WebServlet("/reg")
public class RegServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	public static String LOAD_DRIVER = "com.mysql.cj.jdbc.Driver";
    public static String URL = "jdbc:mysql://localhost:3306/userdb";
    public static String PASSWORD = "ShiAa#$156A3&@";
    public static String USERNAME = "root";
    Connection connection;
    /**
     * @see HttpServlet#HttpServlet()
     */
    public RegServlet() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see Servlet#init(ServletConfig)
	 */
	public void init(ServletConfig config) throws ServletException {
		  try {
				 connection = DriverManager.getConnection(URL,USERNAME,PASSWORD);//here instead of writing like this You can also write it as Connection connection = DriverManager.getConnection(URL,USERNAME,PASSWORD);
		//but since the connection object instance is already declared above as instance variable as to avoid accessibility of it whenever required outside the method	
		  } catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		// TODO Auto-generated method stub
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub(don't worry about it, it is not what you need to understand only thing is it is method that's it)
		String fname = request.getParameter("fname");
		String lname = request.getParameter("lname");
		String uname = request.getParameter("uname");
		String pword = request.getParameter("pword");
		try {
	    PreparedStatement  ps	=	connection.prepareStatement("insert into uinfo values(?,?,?,?)");
		ps.setString(1, fname);
		ps.setString(2, lname);
		ps.setString(3, uname);
		ps.setString(4, pword);
		ps.executeUpdate();
		PrintWriter pw=response.getWriter();
		pw.println("<html><body bgcolor=black text=white><center>");
		/*
		 * <html>
    		 <body bgcolor="black" text="white">
        	    <center>
                 <!-- Content goes here -->
        		</center>
    	      </body>
          </html> 
*/
		pw.println("<h3> Registration Successful </h3> ");
		
		/* pw.println("<h3> Registration Successful </h3>");
Why use the <h3> tag for "Registration Successful"?
The <h3> tag is an HTML heading tag (level 3, smaller than <h1> or <h2> but still prominent). It’s used here for two reasons:

Semantics: <h3> indicates that "Registration Successful" is a heading or important message on the page. HTML is a markup language that structures content for the web, and headings like <h3> help browsers, search engines, and screen readers understand the hierarchy and importance of content.
Visual Styling: By default, <h3> makes the text larger and bolder than regular text, making the message stand out to the user. This is a built-in feature of HTML rendering in browsers.
Is it because HTML is a web language?
Yes, exactly! The servlet is generating HTML because that’s what web browsers understand. When a client (browser) makes a request to the servlet, the servlet’s job is to send back a response, often in the form of an HTML page. The browser interprets the HTML tags to render the page visually:

<h3> tells the browser to display "Registration Successful" as a heading.
The HTML is dynamically generated by the servlet, allowing you to include dynamic content (e.g., a success message after a database operation).
In this case, the servlet is confirming that the user’s registration (likely stored in a database) was successful and presenting that confirmation in a formatted way using HTML. */
		
		
		
		  pw.println("<a href=login.html> Login </a>");
		
		
		/*println("<a href=login.html>login </a>"); (Assuming pw.println)
What is happening in this line?
This line writes an HTML anchor tag (<a>) to the response, creating a clickable link:

<a href="login.html">: Defines a hyperlink that points to login.html (a static HTML page or another resource).
login: The text displayed for the link (the user sees the word "login" and can click it).
</a>: Closes the anchor tag.
When the browser renders this, the user sees a clickable "login" link. Clicking it takes them to login.html.

Why is this code here if data is already stored in the database?
This line isn’t related to storing data in the database—it’s about providing navigation to the user after a successful registration. Let’s break it down:

Context: The servlet has likely already processed the user’s registration form (e.g., via a POST request). It may have:
Validated the input (e.g., username, password).
Stored the user’s data in a database (e.g., using JDBC with a Connection object, as discussed in your previous question).
Determined the registration was successful.
Purpose of the HTML: After storing the data, the servlet generates this HTML page to:
Inform the user that registration was successful (<h3> Registration Successful </h3>).
Provide a way to navigate to the login page (<a href=login.html>login </a>).
Why the link?: The registration process is complete, and the next logical step for the user is to log in. The login.html link directs them to a login form (likely a static HTML page or another servlet endpoint) where they can enter their credentials to access the system.
The HTML is part of the user interface (UI) response, not the database operation. The servlet is dynamically creating a simple webpage to guide the user after the backend processing (database storage) is done.

Why not redirect instead of a link?
Instead of generating a link to login.html, the servlet could redirect the user to the login page directly using:

java

Copy
response.sendRedirect("login.html");
However, the current code:

Shows a confirmation message ("Registration Successful") to reassure the user.
Gives the user control by letting them click the "login" link manually. This approach is common in older or simpler web applications, though modern apps might use redirects or more sophisticated UI frameworks */
	  
		
		
		//response.sendRedirect("login.html");
		
		pw.println("</center></body><html>");
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	
	}

}
