<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="https://jakarta.ee/xml/ns/jakartaee" xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_6_0.xsd" id="WebApp_ID" version="6.0">
  <display-name>LoginProject</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.jsp</welcome-file>
    <welcome-file>default.htm</welcome-file>
  </welcome-file-list>
  <servlet>
    <description></description>
    <display-name>LoginServlet</display-name>
    <servlet-name>LoginServlet</servlet-name>
    <servlet-class>login.LoginServlet</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>LoginServlet</servlet-name>
    <url-pattern>/login</url-pattern>
  </servlet-mapping>
  <servlet>
    <description></description>
    <display-name>RegServlet</display-name>
    <servlet-name>RegServlet</servlet-name>
    <servlet-class>login.RegServlet</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>RegServlet</servlet-name>
    <url-pattern>/reg</url-pattern>
  </servlet-mapping>
</web-app>
<!-- üßæ Purpose of web.xml (Deployment Descriptor)
The web.xml file is used in Java EE (now Jakarta EE) web applications to configure components like servlets, filters, listeners, and default resources. It tells the application server how to route incoming HTTP requests and which classes (like servlets) should handle them.

It is essentially a bridge between your front-end (like HTML forms) and backend Java servlets.

üîπ Servet Definition Explained
xml
Copy
Edit
<servlet>
  <description></description>
  <display-name>LoginServlet</display-name>
  <servlet-name>LoginServlet</servlet-name>
  <servlet-class>login.LoginServlet</servlet-class>
</servlet>
Breakdown:
<servlet> tag defines a servlet component.

<display-name> is an optional human-readable name.

<servlet-name> is the logical name used to refer to this servlet (used in mapping).

<servlet-class> tells the server which Java class to load and instantiate.
‚úÖ Class Name: login.LoginServlet
This means your Java servlet class is in the login package and the class name is LoginServlet.

‚û°Ô∏è This defines the servlet, but it doesn‚Äôt tell the server when to run it yet.
üîπ Servlet Mapping
xml
Copy
Edit
<servlet-mapping>
  <servlet-name>LoginServlet</servlet-name>
  <url-pattern>/login</url-pattern>
</servlet-mapping>
Breakdown:
<servlet-name> matches the one defined above.

<url-pattern> defines the URL that will trigger this servlet.

‚úÖ So, when the user accesses http://yourdomain.com/login, the server invokes the login.LoginServlet class.

üîπ Second Servlet: Registration
xml
Copy
Edit
<servlet>
  <description></description>
  <display-name>RegServlet</display-name>
  <servlet-name>RegServlet</servlet-name>
  <servlet-class>login.RegServlet</servlet-class>
</servlet>
‚úÖ Class Name: login.RegServlet
‚û°Ô∏è This is another servlet for handling registration, defined similarly.

And its mapping:
xml
Copy
Edit
<servlet-mapping>
  <servlet-name>RegServlet</servlet-name>
  <url-pattern>/reg</url-pattern>
</servlet-mapping>
‚úÖ URL Pattern /reg triggers the login.RegServlet. 
-->